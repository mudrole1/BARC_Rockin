<launch>

  <!-- RosAria -->  
  <!-- run RosAria pioneer drivers -->
    <node pkg="rosaria" type="RosAria" name="RosAria" >
<param name="port" type="string" value="/dev/ttyUSB0" />
<remap from="/RosAria/cmd_vel" to="/cmd_vel" />
<remap from="/RosAria/pose" to="odom" />
</node>


<!-- joy node -->
  <node respawn="true" pkg="joy" type="joy_node" name="joy_node" >
    <param name="dev" type="string" value="/dev/input/js0" />
    <param name="deadzone" value="0.12" />
    <param name="autorepeat_rate" type="double" value="10.0" />
  </node>

<!-- Axes -->
  <param name="linear_axis" value="1" type="int"/>  
  <param name="angular_axis" value="0" type="int"/>
  <!--param name="linear_speed_max" value="0.4" type="double"/>
  <param name="angular_speed_max" value="0.6" type="double"/-->
  
   

<node pkg="mixed_initiative_teleop" type="mixed_initiative_teleop_node" name="dora_teleop" output="screen">
</node>

<node pkg="mixed_initiative_controller" type="mixed_initiative_controller_node" name="mi_controller" output="screen">
</node>

<node pkg="dora_nav_goals" type="dora_nav_goals_node" name="dora_nav_goals_node" output="screen">
</node>

<!-- Set this to your camera's name -->
  <arg name="/dev/video0" value="creative_cam" />

<!-- Start the GSCAM node -->
<env name="GSCAM_CONFIG" value="v4l2src device=/dev/video0 ! video/x-raw-yuv,framerate=30/1,width=640,height=480 ! ffmpegcolorspace " />
<node pkg="gscam" type="gscam" name="$(arg cam_name)"/>

<arg name="path_classif" default="/home/manolis/hydro_ws/src/BARC_Rockin/face_recognizer/haarcascades/haarcascade_frontalface_default.xml"/>
<arg name="path_csv" default="/home/manolis/hydro_ws/src/BARC_Rockin/face_recognizer/dataset_CSV.txt" />
<node pkg="face_recognizer" type="face_recognizer_node" name="face_recognizer_node" args="$(arg path_classif) $(arg path_csv)" output="screen">
</node>


  <!-- tf transform -->
  <!-- approximative measures -->
  <!-- args ="x y z qx qy qz frame_id child_frame_id period_in_ms" -->
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.224 0 0.125 0 0 0 base_link base_laser 100" />

  <!--node pkg="tf" type="static_transform_publisher" name="base_link_to_base_sonar" args="0.13 0 0.15 0 0 0 base_link sonar_frame 100" /-->
  

  <!-- hokuyo_node -->  
  <!-- laser scaner drivers -->
  <node name="hokuyo" pkg="hokuyo_node" type="hokuyo_node" respawn="false" output="screen">
    <param name="frame_id" type="string" value="base_laser"/>
      <!-- Starts up faster, but timestamps will be inaccurate. --> 
    <param name="calibrate_time" type="bool" value="true"/> 
        <!-- Set the port to connect to here -->
    <param name="port" type="string" value="/dev/ttyACM0"/> 
      <param name="intensity" type="bool" value="false"/>
  </node>


   <!-- gmapping -->
  <!-- SLAM algorithm -->    
  <!--node name="slam_gmapping" pkg="gmapping" type="slam_gmapping" respawn="true" output="screen">
    <param name="scan" type="string" value="/scan"/> 
    <param name="_odom_frame" type="string" value="odom"/>
  </node-->

<!-- Map_server to load the predefined map -->
<arg name="map_file" default="$(find dora_nav_goals)/map/map.yaml"/>
 <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

<!-- launch AMCL -->
  <include file="$(find dora_2dnav)/launch/amcl_node.launch"/>


<!-- launch move_base -->
<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find dora_2dnav)/config/costmap_common_params_amcl.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find dora_2dnav)/config/costmap_common_params_amcl.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find dora_2dnav)/config/local_costmap_params_amcl.yaml" command="load" />
    <rosparam file="$(find dora_2dnav)/config/global_costmap_params_amcl.yaml" command="load" />
    <rosparam file="$(find dora_2dnav)/config/base_local_planner_params_amcl.yaml" command="load" />
<remap from="/cmd_vel" to="/navigation/cmd_vel" />
  </node>


  <node pkg="state_machine" type="state_machine_task1.py" name="state_machine" output="screen" respawn="true" />

  <node pkg="wait_button" type="wait_button" name="wait_button" output="screen" respawn="true" />



</launch>
